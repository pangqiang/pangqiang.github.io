<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>有意思的鼠标移入效果</title>
      <link href="/2023/05/03/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E9%BC%A0%E6%A0%87%E7%A7%BB%E5%85%A5%E6%95%88%E6%9E%9C/"/>
      <url>/2023/05/03/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E9%BC%A0%E6%A0%87%E7%A7%BB%E5%85%A5%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="在-waifulabs这个网站-看到一个比较有意思的鼠标移入效果，如下图"><a href="#在-waifulabs这个网站-看到一个比较有意思的鼠标移入效果，如下图" class="headerlink" title="在 waifulabs这个网站 看到一个比较有意思的鼠标移入效果，如下图"></a>在 <a href="https://waifulabs.com/generate">waifulabs</a>这个网站 看到一个比较有意思的鼠标移入效果，如下图</h2><p><img src="/../img/css-effects-01.gif" alt="alt text"></p><h2 id="我们来简单实现下-—-抄别人的-），效果如下"><a href="#我们来简单实现下-—-抄别人的-），效果如下" class="headerlink" title="我们来简单实现下 — 抄别人的 :），效果如下"></a>我们来简单实现下 — 抄别人的 :），效果如下</h2><blockquote><p>原代码地址：<a href="https://www.creativebloq.com/inspiration/css-animation-examples">https://www.creativebloq.com/inspiration/css-animation-examples</a><br>Author: <a href="http://hop.ie/">Donovan Hutchinson</a></p></blockquote><p><img src="/../img/css-effects.gif" alt="alt text"></p><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;perspective-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span> <span class="attr">id</span>=<span class="string">&quot;card&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.demo</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">hsl</span>(<span class="number">207</span>, <span class="number">9%</span>, <span class="number">19%</span>);</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.perspective-container</span> &#123;</span><br><span class="line">  <span class="attribute">perspective</span>: <span class="number">800px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">https://picsum.photos/536/354</span>);</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">140px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">5</span>);</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">354px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">536px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="comment">/* transition: all 0.3s ease-out 0s; */</span></span><br><span class="line">  <span class="attr">--sheenX</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* Set these with JavaScript */</span></span><br><span class="line">  <span class="attr">--sheenY</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">217deg</span>, <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>) <span class="number">35%</span>, <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.25</span>) <span class="number">45%</span>, <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">25</span>) <span class="number">50%</span>, <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>) <span class="number">60%</span>, <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>) <span class="number">100%</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="built_in">var</span>(--sheenX)) <span class="built_in">translateY</span>(<span class="built_in">var</span>(--sheenY));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;card&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="title function_">handleMouseMove</span>(event)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;card&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="title function_">handleMouseLeave</span>(event)</span><br><span class="line">    &#125;,<span class="number">300</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleMouseMove</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> height = <span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span><br><span class="line">  <span class="keyword">const</span> width = <span class="variable language_">window</span>.<span class="property">innerWidth</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(height,width);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">pageX</span>,event.<span class="property">pageY</span>);</span><br><span class="line">  <span class="comment">// Creates angles of (-20, -20) (left, bottom) and (20, 20) (right, top)</span></span><br><span class="line">  <span class="keyword">const</span> yAxisDegree = event.<span class="property">pageX</span> / width * <span class="number">40</span> - <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">const</span> xAxisDegree = event.<span class="property">pageY</span> / height * -<span class="number">1</span> * <span class="number">40</span> + <span class="number">20</span>;</span><br><span class="line">  event.<span class="property">target</span>.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`rotateY(<span class="subst">$&#123;yAxisDegree&#125;</span>deg) rotateX(<span class="subst">$&#123;xAxisDegree&#125;</span>deg)`</span>;</span><br><span class="line">  <span class="comment">// Set the sheen position</span></span><br><span class="line">  <span class="title function_">setSheenPosition</span>(event,event.<span class="property">pageX</span> / width, event.<span class="property">pageY</span> / width);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setSheenPosition</span>(<span class="params">e,xRatio, yRatio</span>) &#123;</span><br><span class="line">  <span class="comment">// This creates a &quot;distance&quot; up to 400px each direction to offset the sheen</span></span><br><span class="line">  <span class="keyword">const</span> xOffset = <span class="number">1</span> - (xRatio - <span class="number">0.5</span>) * <span class="number">800</span>;</span><br><span class="line">  <span class="keyword">const</span> yOffset = <span class="number">1</span> - (yRatio - <span class="number">0.5</span>) * <span class="number">800</span>;</span><br><span class="line">  e.<span class="property">target</span>.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&#x27;--sheenX&#x27;</span>, <span class="string">`<span class="subst">$&#123;xOffset&#125;</span>px`</span>)</span><br><span class="line">  e.<span class="property">target</span>.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&#x27;--sheenY&#x27;</span>, <span class="string">`<span class="subst">$&#123;yOffset&#125;</span>px`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleMouseLeave</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  event.<span class="property">target</span>.<span class="property">style</span>.<span class="title function_">removeProperty</span>(<span class="string">&#x27;transform&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios无感刷新token</title>
      <link href="/2023/05/03/axios%E6%97%A0%E6%84%9F%E5%88%B7%E6%96%B0token/"/>
      <url>/2023/05/03/axios%E6%97%A0%E6%84%9F%E5%88%B7%E6%96%B0token/</url>
      
        <content type="html"><![CDATA[<h2 id="app-vue"><a href="#app-vue" class="headerlink" title="app.vue"></a>app.vue</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import instance from &#x27;./api/service.js&#x27;</span><br><span class="line">import &#123; onMounted, onBeforeMount, getCurrentInstance,ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">const app = getCurrentInstance()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const txt = ref(&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const getData = () =&gt; &#123;</span><br><span class="line">  instance(&#123;</span><br><span class="line">    method: &#x27;post&#x27;,</span><br><span class="line">    url: &#x27;http://localhost:3000/api/data&#x27;,</span><br><span class="line">  &#125;)</span><br><span class="line">    .then(function (response) &#123;</span><br><span class="line">      txt.value = response.data.age</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt; &#123;&#123; txt &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;el-button @click=&quot;getData()&quot;&gt; 请求数据 &lt;/el-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.logo &#123;</span><br><span class="line">  height: 6em;</span><br><span class="line">  padding: 1.5em;</span><br><span class="line">  will-change: filter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.logo:hover &#123;</span><br><span class="line">  filter: drop-shadow(0 0 2em #646cffaa);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.logo.vue:hover &#123;</span><br><span class="line">  filter: drop-shadow(0 0 2em #42b883aa);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="axios-service-js"><a href="#axios-service-js" class="headerlink" title="axios service.js"></a>axios service.js</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line">const instance = axios.create(&#123;</span><br><span class="line">  // 配置 axios 实例</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const getToken = () =&gt; &#123;</span><br><span class="line">  return new Promise(resolve =&gt; &#123;</span><br><span class="line">    instance(&#123;</span><br><span class="line">      method: &#x27;post&#x27;,</span><br><span class="line">      url: &#x27;http://localhost:3000/api/token&#x27;,</span><br><span class="line">    &#125;)</span><br><span class="line">      .then(function (response) &#123;</span><br><span class="line">        resolve(response)</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let csrfToken = null;</span><br><span class="line">let isRefreshing = false;</span><br><span class="line">let failedRequests = [];</span><br><span class="line"></span><br><span class="line">instance.interceptors.request.use((config) =&gt; &#123;</span><br><span class="line">  // 在请求头中添加 CSRF token</span><br><span class="line">  if (csrfToken) &#123;</span><br><span class="line">    config.headers[&#x27;X-CSRF-TOKEN&#x27;] = csrfToken;</span><br><span class="line">  &#125;</span><br><span class="line">  return config;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">instance.interceptors.response.use(</span><br><span class="line">  (response) =&gt; &#123;</span><br><span class="line">    return response;</span><br><span class="line">  &#125;,</span><br><span class="line">  (error) =&gt; &#123;</span><br><span class="line">    // 如果响应状态码为 403，表示 CSRF token 失效了</span><br><span class="line">    if (error.response &amp;&amp; error.response.status === 403) &#123;</span><br><span class="line">      // 如果正在刷新 CSRF token，就将请求缓存起来</span><br><span class="line">      if (isRefreshing) &#123;</span><br><span class="line">        return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">          failedRequests.push(&#123; resolve, reject &#125;);</span><br><span class="line">        &#125;).then((token) =&gt; &#123;</span><br><span class="line">          error.config.headers[&#x27;X-CSRF-TOKEN&#x27;] = token;</span><br><span class="line">          return instance(error.config);</span><br><span class="line">        &#125;).catch((err) =&gt; &#123;</span><br><span class="line">          return Promise.reject(err);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      isRefreshing = true;</span><br><span class="line"></span><br><span class="line">      // 发起新的请求获取新的 CSRF token</span><br><span class="line">      return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        instance.get(&#x27;http://localhost:3000/api/token&#x27;)</span><br><span class="line">          .then((response) =&gt; &#123;</span><br><span class="line">            csrfToken = response.data.csrfToken;</span><br><span class="line">            isRefreshing = false;</span><br><span class="line">            // 重新发起之前缓存的请求</span><br><span class="line">            failedRequests.forEach((request) =&gt; &#123;</span><br><span class="line">              request.resolve(csrfToken);</span><br><span class="line">            &#125;);</span><br><span class="line">            failedRequests = [];</span><br><span class="line">            // 在请求头中添加新的 CSRF token，并重新发起请求</span><br><span class="line">            error.config.headers[&#x27;X-CSRF-TOKEN&#x27;] = csrfToken;</span><br><span class="line">            resolve(instance(error.config));</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch((err) =&gt; &#123;</span><br><span class="line">            isRefreshing = false;</span><br><span class="line">            // 清空请求缓存</span><br><span class="line">            failedRequests.forEach((request) =&gt; &#123;</span><br><span class="line">              request.reject(err);</span><br><span class="line">            &#125;);</span><br><span class="line">            failedRequests = [];</span><br><span class="line">            reject(err);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">export default instance;</span><br></pre></td></tr></table></figure><h2 id="service-js"><a href="#service-js" class="headerlink" title="service.js"></a>service.js</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line">const bodyParser = require(&#x27;body-parser&#x27;);</span><br><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line"></span><br><span class="line">const app = express();</span><br><span class="line">var cors = require(&#x27;cors&#x27;)</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(cors())</span><br><span class="line">let count = 0;</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/api/token&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">  const data = &#123;</span><br><span class="line">    csrfToken: new Date().getTime()</span><br><span class="line">  &#125;;</span><br><span class="line">  setTimeout(()=&gt;&#123;</span><br><span class="line">    res.json(data);</span><br><span class="line">  &#125;,3000)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function getRandomInt(min, max) &#123;</span><br><span class="line">  min = Math.ceil(min);</span><br><span class="line">  max = Math.floor(max);</span><br><span class="line">  return Math.floor(Math.random() * (max - min) + min); // The maximum is exclusive and the minimum is inclusive</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getRandomData(jsonFilePath) &#123;</span><br><span class="line">  const jsonData = JSON.parse(fs.readFileSync(jsonFilePath));</span><br><span class="line">  const randomIndex = getRandomInt(0,jsonData.length);</span><br><span class="line">  return jsonData[randomIndex];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 示例用法</span><br><span class="line"></span><br><span class="line">app.post(&#x27;/api/data&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">  const randomData = getRandomData(&#x27;data.json&#x27;);</span><br><span class="line">  count++</span><br><span class="line"></span><br><span class="line">  if (count % 2 === 0 || count % 3 === 0) &#123;</span><br><span class="line">    res.sendStatus(403);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    </span><br><span class="line">    res.json(randomData || &#123;&#x27;default&#x27;:&#x27;true&#x27;&#125;) ;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(3000, () =&gt; &#123;</span><br><span class="line">  console.log(&#x27;Server listening on port 3000&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> axios,js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>echart异形柱状图</title>
      <link href="/2023/05/03/echarts-1/"/>
      <url>/2023/05/03/echarts-1/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;ECharts 折线图示例&lt;/title&gt;</span><br><span class="line">    &lt;!-- 引入 ECharts.js --&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 用于显示折线图的 DOM 节点 --&gt;</span><br><span class="line">    &lt;div id=&quot;chart&quot; style=&quot;width: 800px; height: 600px;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 初始化 ECharts 实例</span><br><span class="line">        var myChart = echarts.init(document.getElementById(&#x27;chart&#x27;));</span><br><span class="line"></span><br><span class="line">        // 指定图表的配置项和数据</span><br><span class="line">        var option = &#123;</span><br><span class="line">            // 设置图表的标题</span><br><span class="line">            title: &#123;</span><br><span class="line">                text: &#x27;山峰起伏状数据统计图表&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 设置图表的 x 轴</span><br><span class="line">            xAxis: &#123;</span><br><span class="line">                type: &#x27;category&#x27;,</span><br><span class="line">                data: [&#x27;一月&#x27;, &#x27;二月&#x27;, &#x27;三月&#x27;, &#x27;四月&#x27;, &#x27;五月&#x27;, &#x27;六月&#x27;]</span><br><span class="line">            &#125;,</span><br><span class="line">            // 设置图表的 y 轴</span><br><span class="line">            yAxis: &#123;</span><br><span class="line">                type: &#x27;value&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 设置图表的数据系列</span><br><span class="line">            series: [&#123;</span><br><span class="line">                name: &#x27;数据&#x27;,</span><br><span class="line">                type: &#x27;line&#x27;,</span><br><span class="line">                // 设置数据</span><br><span class="line">                data: [820, 932, 901, 934, 1290, 1330, 1320],</span><br><span class="line">                // 设置线条样式</span><br><span class="line">                lineStyle: &#123;</span><br><span class="line">                    width: 3,</span><br><span class="line">                    color: &#x27;green&#x27;</span><br><span class="line">                &#125;,</span><br><span class="line">                // 设置区域填充样式</span><br><span class="line">                areaStyle: &#123;</span><br><span class="line">                    color: &#123;</span><br><span class="line">                        type: &#x27;linear&#x27;,</span><br><span class="line">                        x: 0,</span><br><span class="line">                        y: 0,</span><br><span class="line">                        x2: 0,</span><br><span class="line">                        y2: 1,</span><br><span class="line">                        colorStops: [&#123;</span><br><span class="line">                            offset: 0, color: &#x27;white&#x27; // 0% 处的颜色</span><br><span class="line">                        &#125;, &#123;</span><br><span class="line">                            offset: 0.5, color: &#x27;lightgreen&#x27; // 50% 处的颜色</span><br><span class="line">                        &#125;, &#123;</span><br><span class="line">                            offset: 1, color: &#x27;green&#x27; // 100% 处的颜色</span><br><span class="line">                        &#125;],</span><br><span class="line">                        globalCoord: false // 缺省为 false</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        // 使用刚指定的配置项和数据显示图表</span><br><span class="line">        myChart.setOption(option);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJS截取视频第一帧</title>
      <link href="/2023/05/03/nodejs%E8%8E%B7%E5%8F%96%E4%B8%8A%E4%BC%A0%E8%A7%86%E9%A2%91%E7%AC%AC%E4%B8%80%E5%B8%A7/"/>
      <url>/2023/05/03/nodejs%E8%8E%B7%E5%8F%96%E4%B8%8A%E4%BC%A0%E8%A7%86%E9%A2%91%E7%AC%AC%E4%B8%80%E5%B8%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="NodeJS截取视频第一帧"><a href="#NodeJS截取视频第一帧" class="headerlink" title="NodeJS截取视频第一帧"></a>NodeJS截取视频第一帧</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ffmpegPath = <span class="built_in">require</span>(<span class="string">&#x27;@ffmpeg-installer/ffmpeg&#x27;</span>).<span class="property">path</span>;</span><br><span class="line"><span class="keyword">const</span> ffmpeg = <span class="built_in">require</span>(<span class="string">&#x27;fluent-ffmpeg&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置ffmpeg的路径</span></span><br><span class="line">ffmpeg.<span class="title function_">setFfmpegPath</span>(ffmpegPath);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置上传文件的存储位置</span></span><br><span class="line"><span class="keyword">const</span> storage = multer.<span class="title function_">diskStorage</span>(&#123;</span><br><span class="line">  <span class="attr">destination</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="string">&#x27;./uploads&#x27;</span>); <span class="comment">// 上传的文件存储在 uploads 目录中</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">filename</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">cb</span>(<span class="literal">null</span>, file.<span class="property">fieldname</span> + <span class="string">&#x27;-&#x27;</span> + <span class="title class_">Date</span>.<span class="title function_">now</span>() + path.<span class="title function_">extname</span>(file.<span class="property">originalname</span>)); <span class="comment">// 给上传的文件命名</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建上传中间件</span></span><br><span class="line"><span class="keyword">const</span> upload = <span class="title function_">multer</span>(&#123; storage &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义接口，使用upload中间件解析上传的文件</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/upload&#x27;</span>, upload.<span class="title function_">single</span>(<span class="string">&#x27;video&#x27;</span>), <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 获取上传的视频文件的路径</span></span><br><span class="line">  <span class="keyword">const</span> videoPath = req.<span class="property">file</span>.<span class="property">path</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用FFmpeg的ffprobe命令获取视频信息</span></span><br><span class="line">  ffmpeg.<span class="title function_">ffprobe</span>(videoPath, <span class="function">(<span class="params">err, metadata</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取视频的第一帧</span></span><br><span class="line">    <span class="keyword">const</span> screenshotPath = <span class="string">&#x27;./uploads/screenshot.jpg&#x27;</span>;</span><br><span class="line">    <span class="title function_">ffmpeg</span>(videoPath)</span><br><span class="line">      .<span class="title function_">screenshots</span>(&#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">folder</span>: <span class="string">&#x27;./uploads&#x27;</span>,</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;screenshot-%i.jpg&#x27;</span>,</span><br><span class="line">        <span class="attr">size</span>: metadata.<span class="property">streams</span>[<span class="number">0</span>].<span class="property">resolution</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;截取第一帧成功&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将视频文件路径和封面图路径返回给前端</span></span><br><span class="line">        res.<span class="title function_">json</span>(&#123;</span><br><span class="line">          videoPath,</span><br><span class="line">          screenshotPath</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;截取第一帧失败：&#x27;</span>, err);</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&#x27;截取第一帧失败&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器已启动&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用WebSocket和NodeJs实现一个本地聊天功能</title>
      <link href="/2023/05/01/%E7%94%A8WebSocket%E5%92%8CNodeJs%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%9C%AC%E5%9C%B0%E8%81%8A%E5%A4%A9%E5%8A%9F%E8%83%BD/"/>
      <url>/2023/05/01/%E7%94%A8WebSocket%E5%92%8CNodeJs%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%9C%AC%E5%9C%B0%E8%81%8A%E5%A4%A9%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h2><p><img src="/../img/chat.gif" alt="alt text"></p><h2 id="WebSocket-是什么？"><a href="#WebSocket-是什么？" class="headerlink" title="WebSocket 是什么？"></a>WebSocket 是什么？</h2><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket">https://developer.mozilla.org/en-US/docs/Web/API/WebSocket</a></p></blockquote><p>  WebSocket 是一种在客户端和服务器之间进行双向通信的协议，它可以实现实时数据传输，具有以下应用场景：</p><ol><li><p>实时聊天应用程序：使用 WebSocket 可以实现实时聊天应用程序，因为它可以在客户端和服务器之间实时传递消息。</p></li><li><p>在线游戏：WebSocket 可以在客户端和服务器之间快速传递游戏数据，从而实现在线游戏。</p></li><li><p>实时数据传输应用程序：WebSocket 可以用于实时监控应用程序或传感器，因为它可以在客户端和服务器之间实时传输数据。</p></li><li><p>实时协作工具：WebSocket 可以用于协作应用程序，如在线白板或协作文档编辑器。</p></li><li><p>实时财经应用程序：WebSocket 可以用于实时股票报价或实时货币汇率转换等实时财经应用程序。</p></li></ol><p>  总之，WebSocket 可以在需要实现实时数据传输或实时通信的任何应用程序中使用。</p><h2 id="使用vue和NodeJS实现一个简单的demo"><a href="#使用vue和NodeJS实现一个简单的demo" class="headerlink" title="使用vue和NodeJS实现一个简单的demo"></a>使用vue和NodeJS实现一个简单的demo</h2><h3 id="前端代码（Vue-js）"><a href="#前端代码（Vue-js）" class="headerlink" title="前端代码（Vue.js）"></a>前端代码（Vue.js）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span> Wechat <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;chat-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;message-box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;chat-message&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;msg in messages&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;msg.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:class</span>=<span class="string">&quot;msg.contentOwer === pageName ? &#x27;outgoing&#x27; : &#x27;incoming&#x27;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;chat-message-content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;&#123; msg.content &#125;&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;chat-message-time&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;&#123; msg.timestamp &#125;&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;chat-input-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;chat-input&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Type your message here...&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          @<span class="attr">keydown.enter</span>=<span class="string">&quot;sendMessage&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;chat-send-button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;sendMessage&quot;</span>&gt;</span> Send <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; io &#125; <span class="keyword">from</span> <span class="string">&#x27;socket.io-client&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">socket</span>: <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">messages</span>: [],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">message</span>: <span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">pageName</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="property">socket</span> = <span class="title function_">io</span>(<span class="string">&#x27;ws://localhost:3000&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="property">socket</span>.<span class="title function_">on</span>(<span class="string">&#x27;connect&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Connected to server&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="property">socket</span>.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">messages</span>.<span class="title function_">push</span>(data);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="property">socket</span>.<span class="title function_">on</span>(<span class="string">&#x27;disconnect&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Disconnected from server&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="property">pageName</span> = <span class="string">&#x27;my_page_&#x27;</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toString</span>(<span class="number">36</span>).<span class="title function_">substr</span>(<span class="number">2</span>, <span class="number">10</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">sendMessage</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">message</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">const</span> messageData = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">content</span>: <span class="variable language_">this</span>.<span class="property">message</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>(),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">contentOwer</span>: <span class="variable language_">this</span>.<span class="property">pageName</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">socket</span>.<span class="title function_">emit</span>(<span class="string">&#x27;message&#x27;</span>, messageData);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&#x27;&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.chat-container</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">display</span>: flex;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">flex-direction</span>: column;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">justify-content</span>: end;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">min-height</span>: <span class="number">400px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">width</span>: <span class="number">300px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">background-color</span>: <span class="number">#f2f2f2</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border-radius</span>: <span class="number">6px</span>; </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">overflow</span>: hidden;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.chat-message</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">display</span>: flex;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">flex-direction</span>: column;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">align-items</span>: flex-start;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="comment">/* margin: 10px; */</span></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.message-box</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">overflow-y</span>: auto;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">max-height</span>: <span class="number">400px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.chat-message-content</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">max-width</span>: <span class="number">70%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">2px</span> <span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.chat-message-time</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">color</span>: <span class="number">#666</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.chat-message</span><span class="selector-class">.incoming</span> <span class="selector-class">.chat-message-content</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.chat-message</span><span class="selector-class">.outgoing</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">align-items</span>: end;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.chat-message</span><span class="selector-class">.outgoing</span> <span class="selector-class">.chat-message-content</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">background-color</span>: <span class="number">#007aff</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.chat-input-container</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">display</span>: flex;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">align-items</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">20px</span> <span class="number">10px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">2px</span> <span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">overflow</span>: hidden;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.chat-input</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">flex</span>: <span class="number">1</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border</span>: none;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">font-family</span>: inherit;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.chat-send-button</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">background-color</span>: transparent;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border</span>: none;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">color</span>: <span class="number">#007aff</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">cursor</span>: pointer;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.chat-send-button</span><span class="selector-pseudo">:hover</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">color</span>: <span class="number">#0052cc</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>后端代码（NodeJS）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> httpServer = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>).<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 处理 / 路由的 GET 请求</span></span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&#x27;GET&#x27;</span> &amp;&amp; req.<span class="property">url</span> === <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span> &#125;);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;Hello, service is running&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 处理其他请求，比如 WebSocket 的连接</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">&#x27;socket.io&#x27;</span>)(httpServer, &#123;</span><br><span class="line">  <span class="attr">cors</span>: &#123;</span><br><span class="line">    <span class="attr">origin</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">io.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;New client connected&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  socket.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Received message: <span class="subst">$&#123;data.content&#125;</span>`</span>);</span><br><span class="line">    io.<span class="title function_">emit</span>(<span class="string">&#x27;message&#x27;</span>, data);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  socket.<span class="title function_">on</span>(<span class="string">&#x27;disconnect&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Client disconnected&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">httpServer.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket server listening on port 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NodeJS简易上传接口</title>
      <link href="/2023/04/22/NodeJS%E7%AE%80%E6%98%93%E4%B8%8A%E4%BC%A0%E6%8E%A5%E5%8F%A3-md/"/>
      <url>/2023/04/22/NodeJS%E7%AE%80%E6%98%93%E4%B8%8A%E4%BC%A0%E6%8E%A5%E5%8F%A3-md/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置上传文件的存储位置和文件名</span></span><br><span class="line"><span class="keyword">const</span> storage = multer.<span class="title function_">diskStorage</span>(&#123;</span><br><span class="line">  <span class="attr">destination</span>: <span class="keyword">function</span>(<span class="params">req, file, cb</span>) &#123;</span><br><span class="line">    <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="string">&#x27;./uploads/&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">filename</span>: <span class="keyword">function</span>(<span class="params">req, file, cb</span>) &#123;</span><br><span class="line">    <span class="title function_">cb</span>(<span class="literal">null</span>, file.<span class="property">originalname</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>())</span><br><span class="line"><span class="comment">// 创建multer中间件</span></span><br><span class="line"><span class="keyword">const</span> upload = <span class="title function_">multer</span>(&#123;<span class="attr">storage</span>: storage&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理文件上传请求</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/upload&#x27;</span>, upload.<span class="title function_">single</span>(<span class="string">&#x27;file&#x27;</span>), <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req)</span><br><span class="line">  <span class="comment">// 文件上传成功后，返回文件的URL地址</span></span><br><span class="line">  <span class="comment">// 该处没有判断文件夹是否存在的逻辑，因此上传之前需在项目根目录下创建一个uploads文件夹</span></span><br><span class="line">  res.<span class="title function_">json</span>(&#123;<span class="attr">path</span>: <span class="string">&#x27;/uploads/&#x27;</span> + req.<span class="property">file</span>.<span class="property">filename</span>&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;&lt;h1&gt;服务运行中&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3001</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server is listening on port 3001&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置静态文件目录</span></span><br><span class="line"> app.<span class="title function_">use</span>(<span class="string">&#x27;/uploads&#x27;</span>, express.<span class="title function_">static</span>(__dirname + <span class="string">&#x27;/uploads&#x27;</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElementUI menu组件手动获取indexPath</title>
      <link href="/2023/04/09/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E7%9A%84%E8%8F%9C%E5%8D%95%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%A6%82%E4%BD%95%E4%B8%8D%E8%A7%A6%E5%8F%91select-Menu-Events%E8%8E%B7%E5%8F%96indexPath/"/>
      <url>/2023/04/09/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E7%9A%84%E8%8F%9C%E5%8D%95%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%A6%82%E4%BD%95%E4%B8%8D%E8%A7%A6%E5%8F%91select-Menu-Events%E8%8E%B7%E5%8F%96indexPath/</url>
      
        <content type="html"><![CDATA[<h2 id="动态加载的菜单数据，如何不触发select-Menu-Events获取indexPath"><a href="#动态加载的菜单数据，如何不触发select-Menu-Events获取indexPath" class="headerlink" title="动态加载的菜单数据，如何不触发select Menu Events获取indexPath"></a>动态加载的菜单数据，如何不触发select Menu Events获取indexPath</h2><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>业务开发中，需要实现一个右键在新页面打开当前所选菜单功能，并且新页面打开后，需要高亮选中之前右键点击的那个菜单。因为菜单可配置，数量无法预估，因此菜单的加载被设计成动态加载，触发条件为鼠标移入当前父级菜单才会去加载子级菜单，由此，也导致新打开的页面，菜单并没有子数据，所以就算是我们记录了之前点击的具体的某一次子菜单，我们也无法选中，想要选中，必须某一级的菜单链上的菜单数据在页面加载完成时，菜单数据也需要被加载，蠢办法是菜单数据在请求时全量加载，但显然不，这不是一个优雅的解决办法（:</p><p>那么比较优雅的解决办法是什么呢？</p><p>答案是：回显选中，我们只需要 <strong>所选菜单整个链上</strong> 的数据即可，也就是<code>indexpath</code>记录的数组中的对应的菜单数据。</p><p>那么我们就需要知道某一个选中的菜单<code>indexPath</code>,通常indexpath的值是每一级数据的ID，例如[1xxxx, 2xxxx, 3xxxx], 我们通过后台接口，查出整个indexPath链上的数据。</p><h2 id="如何获取-indexPath？"><a href="#如何获取-indexPath？" class="headerlink" title="如何获取 indexPath？"></a>如何获取 indexPath？</h2><p>Element 的menu组件中  Menu Events 板块中，提供了 <code>select</code> 事件，我们在点击菜单时候，会触发<code>select</code> 事件，回调参数中的第二个参数便是<code>indexpath</code>，但是，我们右键点击菜单时，并不会触发<code>select</code> ，那么如何在右键点击时候获取到 <code>indexpath</code>呢？</p><blockquote><p><a href="https://element-plus.gitee.io/zh-CN/component/menu.html#menu-events">https://element-plus.gitee.io/zh-CN/component/menu.html#menu-events</a></p></blockquote><p><img src="/../img/menu.png" alt="image"></p><p>通常 ，我们可能会想到，在右键点击的时候，去主动触发一次左键点击事件，但是一般情况，我们左键点击都绑定着具体的业务逻辑，我们手动触发，势必是要在左键触发的逻辑中做适配，否则就会影响原有逻辑，我们希望的是能不影响任何原有逻辑的情况，有一个单纯获取<code>indexpath</code>的方法，方法如下 （来自ElementUI源码）：</p><p>组合式写法如下，基于setup</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> indexPath = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> parent = instance.<span class="property">parent</span>!</span><br><span class="line">  <span class="keyword">const</span> path = [currentIndex.<span class="property">value</span>]</span><br><span class="line">  <span class="keyword">while</span> (parent.<span class="property">type</span>.<span class="property">name</span> !== <span class="string">&#x27;ElMenu&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (parent.<span class="property">props</span>.<span class="property">index</span>) &#123;</span><br><span class="line">      path.<span class="title function_">unshift</span>(parent.<span class="property">props</span>.<span class="property">index</span> <span class="keyword">as</span> <span class="built_in">string</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    parent = parent.<span class="property">parent</span>!</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> path</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>选项式写法如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> indexPath = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> parent = instance.<span class="property">$parent</span> <span class="comment">// instance 为当前组件，options写法中，通过 this.$refs 获取</span></span><br><span class="line">  <span class="keyword">const</span> path = [currentIndex] <span class="comment">// currentIndex 为当前点击的菜单的 index</span></span><br><span class="line">  <span class="keyword">while</span> (parent.<span class="property">$options</span>.<span class="property">name</span> !== <span class="string">&#x27;ElMenu&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (parent.<span class="property">$options</span>.<span class="property">index</span>) &#123;</span><br><span class="line">      path.<span class="title function_">unshift</span>(parent.<span class="property">$options</span>.<span class="property">index</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    parent = parent.<span class="property">$parent</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> path</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ElementUI技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地调试element-plus源码正确方式</title>
      <link href="/2023/04/02/%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95element-plus%E6%BA%90%E7%A0%81%E6%AD%A3%E7%A1%AE%E6%96%B9%E5%BC%8F/"/>
      <url>/2023/04/02/%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95element-plus%E6%BA%90%E7%A0%81%E6%AD%A3%E7%A1%AE%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="本地调试-element-plus-的源码，可以按照以下步骤进行"><a href="#本地调试-element-plus-的源码，可以按照以下步骤进行" class="headerlink" title="本地调试 element-plus 的源码，可以按照以下步骤进行"></a>本地调试 element-plus 的源码，可以按照以下步骤进行</h2><h3 id="element-plus使用-yarn-和-pnpm-管理代码，已安装，直接执行第三步。未安装-请先安装yarn-和-pnpm"><a href="#element-plus使用-yarn-和-pnpm-管理代码，已安装，直接执行第三步。未安装-请先安装yarn-和-pnpm" class="headerlink" title="element-plus使用 yarn 和 pnpm 管理代码，已安装，直接执行第三步。未安装, 请先安装yarn 和 pnpm"></a>element-plus使用 yarn 和 pnpm 管理代码，已安装，直接执行第三步。未安装, 请先安装yarn 和 pnpm</h3><h3 id="1-安装-yarn"><a href="#1-安装-yarn" class="headerlink" title="1. 安装 yarn"></a>1. 安装 yarn</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn</span><br></pre></td></tr></table></figure><h3 id="2-安装-pnpm"><a href="#2-安装-pnpm" class="headerlink" title="2. 安装 pnpm"></a>2. 安装 pnpm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g pnpm</span><br></pre></td></tr></table></figure><h3 id="3-准备调试"><a href="#3-准备调试" class="headerlink" title="3. 准备调试"></a>3. 准备调试</h3><p>在控制台执行如下步骤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;https://github.com/element-plus/element-plus.git&gt;</span><br><span class="line"><span class="built_in">cd</span> element-plus</span><br><span class="line">pnpm install</span><br><span class="line">yarn dev</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-浏览器打开已启动的本地服务"><a href="#4-浏览器打开已启动的本地服务" class="headerlink" title="4. 浏览器打开已启动的本地服务"></a>4. 浏览器打开已启动的本地服务</h3><p><img src="/../img/element-run.png" alt="alt text"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归遍历菜单结构</title>
      <link href="/2023/04/01/%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86%E8%8F%9C%E5%8D%95%E7%BB%93%E6%9E%84/"/>
      <url>/2023/04/01/%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86%E8%8F%9C%E5%8D%95%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h3 id="递归遍历菜单结构"><a href="#递归遍历菜单结构" class="headerlink" title="递归遍历菜单结构"></a>递归遍历菜单结构</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS基础-逗号运算符（,）</title>
      <link href="/2023/03/26/JS%E5%9F%BA%E7%A1%80-%E9%80%97%E5%8F%B7%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88-%EF%BC%89/"/>
      <url>/2023/03/26/JS%E5%9F%BA%E7%A1%80-%E9%80%97%E5%8F%B7%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88-%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="JS基础-逗号运算符（-）"><a href="#JS基础-逗号运算符（-）" class="headerlink" title="JS基础-逗号运算符（,）"></a>JS基础-逗号运算符（,）</h2><p>今天在在逛知乎时候，看到一个问题</p><blockquote><p>有哪些短小却令人惊叹的 JavaScript 代码？</p></blockquote><p>文章中有一个回答：统计字符串中相同字符出现的次数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="string">&#x27;abcdaabc&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> info = arr</span><br><span class="line">    .<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    .<span class="title function_">reduce</span>(<span class="function">(<span class="params">p, k</span>) =&gt;</span> (p[k]++ || (p[k] = <span class="number">1</span>), p), &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info); <span class="comment">//&#123; a: 3, b: 2, c: 2, d: 1 &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>写过JS的同学都知道<code>split</code> <code>reduce</code> 都是常用的数组方法，这段代码奇妙的地方就在与 <code>(p[k] = 1), p)</code> 中的<br>逗号运算符。</p><h3 id="逗号运算符的定义"><a href="#逗号运算符的定义" class="headerlink" title="逗号运算符的定义"></a>逗号运算符的定义</h3><p>我们先来看MDN对逗号运算符的定义</p><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comma_Operator">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comma_Operator</a><br>逗号（,）运算符对它的每个操作数从左到右求值，并返回最后一个操作数的值。这让你可以创建一个复合表达式，其中多个表达式被评估，复合表达式的最终值是其成员表达式中最右边的值。</p></blockquote><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><blockquote><p>expr1, expr2, expr3&#x2F;<em>, …</em>&#x2F;</p></blockquote><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><blockquote><p>一个或多个表达式，最后一个表达式的返回值会作为当前复合表达式的值。</p></blockquote><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><blockquote><p>当你想要在期望一个表达式的位置包含多个表达式时，可以使用逗号运算符。这个运算符最常用的一种情况是：在 for 循环中提供多个参数。<br>逗号运算符与数组、对象和函数参数中的逗号含义完全不同。</p></blockquote><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote><p>假设 a 是一个二维数组，每一维度包含 10 个元素，以下代码通过使用逗号运算符，可以同时递增 i 和递减 j。<br>下面的代码打印一个二维数组中斜线方向的元素：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="number">9</span>; i &lt;= <span class="number">9</span>; i++, j--) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`a[<span class="subst">$&#123;i&#125;</span>][<span class="subst">$&#123;j&#125;</span>] = <span class="subst">$&#123;a[i][j]&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理后返回</p><blockquote><p>另一个使用逗号运算符的例子是在返回值前处理一些操作。如前所述，逗号运算符只会返回最后一个元素，但其他表达式都会被求值。所以，可以这么做：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (x += <span class="number">1</span>, x); <span class="comment">// 与 return ++x; 等价</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该回答中，和MDN 中举例的 “处理后返回” 中的示例代码道理是一致的，下面我们详细分析</p><p>首先我们将函数以我们大多数时候会写出的代码，重写一下，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> info = arr</span><br><span class="line">    .<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    .<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">p,k</span>)&#123;</span><br><span class="line">      <span class="comment">// k 表示当前操作的元素 </span></span><br><span class="line">      <span class="keyword">if</span>(p[k])&#123;</span><br><span class="line">        p[k]++</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        p[k]=<span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> p</span><br><span class="line">    &#125;,&#123;&#125;);</span><br></pre></td></tr></table></figure><p>上述代码中，if表达式可以使用三元表达式简写，因为我们可以修改上述代码为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> info = arr</span><br><span class="line">    .<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    .<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">p,k</span>)&#123;</span><br><span class="line">      <span class="comment">// k 表示当前操作的元素 </span></span><br><span class="line">      p[k]++ || (p[k]=<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> p</span><br><span class="line">    &#125;,&#123;&#125;);</span><br></pre></td></tr></table></figure><p>上述表达式中，由于逗号运算符只会返回最后一个元素，但其他表达式都会被求值。 我们可以使用逗号表达式改写为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> info = arr</span><br><span class="line">    .<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    .<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">p,k</span>)&#123;</span><br><span class="line">      <span class="comment">// k 表示当前操作的元素 </span></span><br><span class="line">      <span class="keyword">return</span> ( p[k]++||(p[k]=<span class="number">1</span>), p)  <span class="comment">// 等价于p[k]++ || ( p[k]=1) return p</span></span><br><span class="line"> </span><br><span class="line">    &#125;,&#123;&#125;);</span><br></pre></td></tr></table></figure><p>最后，我们将内联函数的形式改为箭头函数,省略return，便得到了最终代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> info = arr</span><br><span class="line">.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">.<span class="title function_">reduce</span>(</span><br><span class="line">  <span class="function">(<span class="params">p,k</span>) =&gt;</span> (p[k]++||(p[k]=<span class="number">1</span>),p),</span><br><span class="line">  &#123;&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JS基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ChatGPT问答系列 - 递归</title>
      <link href="/2023/03/19/ChatGPT%E9%97%AE%E7%AD%94%E7%B3%BB%E5%88%97/"/>
      <url>/2023/03/19/ChatGPT%E9%97%AE%E7%AD%94%E7%B3%BB%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h3 id="🤔-请使用通俗易懂的话解释递归执行的顺序和原理"><a href="#🤔-请使用通俗易懂的话解释递归执行的顺序和原理" class="headerlink" title="🤔 请使用通俗易懂的话解释递归执行的顺序和原理"></a>🤔 请使用通俗易懂的话解释递归执行的顺序和原理</h3><blockquote><p>递归是一种函数调用自身的编程技术。在递归中，函数将问题分解为较小的子问题，并使用相同的函数递归地解决这些子问题。递归执行的顺序和原理如下:</p></blockquote><blockquote><ol><li>当函数被调用时，它首先执行函数内的代码，直到遇到递归调用。递归调用会使函数重新运行，并创建一个新的局部变量和新的执行环境。</li><li>在递归调用中，函数将问题分解为更小的子问题。通常，这些子问题与原始问题具有相同的结构，只是问题规模更小。</li><li>当问题被分解为最小规模时，函数将不再进行递归调用，而是直接返回结果。这个返回值会成为之前递归调用的返回值的一部分，直到整个递归过程结束。</li></ol></blockquote><blockquote><p>当递归结束后，程序将返回到最初的函数调用，继续执行原始函数中的代码。整个递归过程可以看作是一系列嵌套函数调用的堆栈，直到递归结束后，程序会逐步从最深的嵌套函数调用中返回到最初的调用处。<br>总之，递归是一种强大的编程技术，可以帮助我们解决许多复杂的问题。但是，由于递归可能导致无限循环和堆栈溢出等问题，因此需要谨慎使用，并确保递归函数的正确性和效率。</p></blockquote><h3 id="请举一个简单的例子"><a href="#请举一个简单的例子" class="headerlink" title="请举一个简单的例子"></a>请举一个简单的例子</h3><p>一个经典的递归例子是计算阶乘（factorial）函数。阶乘函数表示将一个正整数 n 乘以小于等于 n 的所有正整数的积。阶乘函数的定义如下：</p><p><code>n! = n * (n-1) * (n-2) * ... * 2 * 1</code></p><p>使用递归可以将阶乘函数简洁地实现。下面是一个计算阶乘的递归函数的 Python 代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:    <span class="comment"># 递归结束条件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n-<span class="number">1</span>)    <span class="comment"># 递归调用</span></span><br></pre></td></tr></table></figure><p>在这个函数中，当 n 为 0 时，递归结束，函数返回 1。当 n 大于 0 时，函数执行递归调用，将 n 乘以 factorial(n-1) 的返回值。这个递归调用会一直执行到 n 等于 0，然后逐步返回到之前的递归调用处，最终得到阶乘的结果。例如，factorial(5) 的值为 5 * 4 * 3 * 2 * 1 &#x3D; 120。</p><h3 id="你认为动态规划和递归之间有关系吗"><a href="#你认为动态规划和递归之间有关系吗" class="headerlink" title="你认为动态规划和递归之间有关系吗"></a>你认为动态规划和递归之间有关系吗</h3><p> 递归通常用于将复杂问题分解成更小的子问题，以便逐步解决。这种方法对于问题的分解和解决非常有效，但也可能导致重复计算。例如，在计算斐波那契数列时，递归算法会多次计算相同的子问题，导致时间复杂度较高。</p><p>动态规划则是一种通过将问题分解为重叠的子问题来解决问题的方法，避免了重复计算。动态规划算法通常通过存储子问题的解决方案，以避免重复计算。</p><p>动态规划和递归之间的关系在于，动态规划算法通常通过递归来实现，但是在计算过程中，动态规划算法会根据子问题的解决方案来避免重复计算。因此，可以将动态规划看作是一种优化后的递归算法，可以有效地解决复杂问题，同时避免了递归算法中的重复计算问题。</p><h3 id="将动态规划看作是一种优化后的递归算法，那具体是怎么优化的呢"><a href="#将动态规划看作是一种优化后的递归算法，那具体是怎么优化的呢" class="headerlink" title="将动态规划看作是一种优化后的递归算法，那具体是怎么优化的呢"></a>将动态规划看作是一种优化后的递归算法，那具体是怎么优化的呢</h3><blockquote><p>动态规划算法是通过将问题分解成更小的子问题，并利用子问题的解来构建问题的解决方案。这种分解问题的方法类似于递归算法，但是动态规划算法中会进行额外的优化，以避免递归算法中的重复计算问题。<br>具体而言，动态规划算法的优化包括以下几个方面：</p></blockquote><blockquote><ul><li>子问题的重叠性：动态规划算法将问题分解成子问题，并将子问题的解保存下来。在计算下一个子问题的解时，动态规划算法可以利用已经计算过的子问题的解，从而避免重复计算。</li><li>最优子结构：动态规划算法将问题分解成子问题，并通过子问题的最优解来构建问题的最优解。这种最优子结构的特性使得动态规划算法能够有效地解决复杂问题。</li><li>状态转移方程：动态规划算法通过状态转移方程来描述问题的解决方案。状态转移方程表示当前问题的解决方案与其子问题的解决方案之间的关系。通过利用状态转移方程，动态规划算法可以有效地计算问题的解决方案。</li></ul></blockquote><blockquote><p>通过这些优化，动态规划算法可以避免递归算法中的重复计算问题，同时具有更高的计算效率和更好的时间复杂度。因此，可以将动态规划看作是一种优化后的递归算法。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ChatGPT问答系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础算法-动态规划入门</title>
      <link href="/2023/03/16/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/"/>
      <url>/2023/03/16/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><blockquote><p>动态规划的算法是一种优化技术，它可以将一个复杂的问题分解成若干个子问题，并且利用子问题的最优解来推导出原问题的最优解。动态规划通常需要满足两个条件：最优子结构和无后效性</p></blockquote><h2 id="动态规划的两个重要条件"><a href="#动态规划的两个重要条件" class="headerlink" title="动态规划的两个重要条件"></a>动态规划的两个重要条件</h2><h3 id="最优子结构"><a href="#最优子结构" class="headerlink" title="最优子结构"></a>最优子结构</h3><p>最优子结构是指一个问题的最优解可以由其子问题的最优解推导出来，也就是说，如果我们知道了所有的子问题的最优解，那么我们就可以很容易地得到原问题的最优解。</p><h3 id="无后效性"><a href="#无后效性" class="headerlink" title="无后效性"></a>无后效性</h3><p>无后效性是指一个状态一旦确定，就不受之后的状态或者决策的影响。也就是说，我们只需要关心当前的状态，而不需要考虑它是如何产生的，或者它会对未来产生什么影响</p><p>举个例子，假设我们要求一个字符串的最长回文子串（即正反读都一样的子串），那么这个问题就具有最优子结构和无后效性。</p><ul><li><p>最优子结构：如果我们知道了字符串s[i…j]是否是回文串，那么我们就可以根据s[i]&#x3D;&#x3D;s[j]和s[i+1…j-1]是否是回文串来判断s[i…j+1]是否是回文串。因此，我们可以从长度为1和2的子串开始判断，并逐渐扩展到更长的子串，直到找到最长的回文子串。</p></li><li><p>无后效性：对于任意一个字符串s[i…j]，它是否是回文串只取决于它本身，而不受前面或者后面的字符或者其他状态的影响。因此，我们只需要记录每个字符串是否是回文串即可，并不需要关心它们之间如何转移。</p></li></ul><p>爬楼梯问题是一个经典的动态规划问题，它可以用以下的描述：¹²³</p><ul><li>有一个 n 层的楼梯，每次可以选择爬一级或者两级台阶。</li><li>求有多少种不同的方法可以爬到第 n 层。</li></ul><p>这个问题的解法可以用以下的思路：¹²³</p><ul><li>定义状态：dp[i] 表示爬到第 i 层的方法数。</li><li>找出状态转移方程：dp[i] &#x3D; dp[i-1] + dp[i-2]，因为每次只能爬一级或者两级，所以到达第 i 层的方法数等于到达第 i-1 层和第 i-2 层的方法数之和。</li><li>确定边界条件：dp[0] &#x3D; 0，dp[1] &#x3D; 1，dp[2] &#x3D; 2，因为没有台阶时没有方法，只有一级台阶时只有一种方法，只有两级台阶时有两种方法。</li><li>计算结果：从小到大依次计算 dp[i] 的值，直到得到 dp[n] 即为最终答案。</li></ul><p>用 JavaScript 语言实现这个算法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">climbStairs</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="comment">// 初始化状态数组</span></span><br><span class="line">    <span class="keyword">let</span> dp = <span class="keyword">new</span> <span class="title class_">Array</span>(n+<span class="number">1</span>).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 边界条件</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 状态转移方程</span></span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        dp[i] = dp[i-<span class="number">1</span>] + dp[i-<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考网址：</p><ol><li><a href="https://www.cnblogs.com/icode-girl/p/5312679.html">cnblogs.com</a>。</li><li><a href="https://blog.51cto.com/u_6468453/6124483">blog.51cto.com</a></li><li><a href="https://www.zhihu.com/question/43361359">zhihu.com</a></li><li><a href="https://blog.csdn.net/qq_25800311/article/details/90635979">blog.csdn.net</a></li><li><a href="https://www.bing.com/search?q=%E6%9C%80%E4%BC%98%E5%AD%90%E7%BB%93%E6%9E%84%E5%92%8C%E6%97%A0%E5%90%8E%E6%95%88%E6%80%A7&toWww=1&redig=0E9313C4E45E4D468016AAA33CB82A8E">bing.com</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础算法-滑动窗口</title>
      <link href="/2023/03/13/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
      <url>/2023/03/13/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="滑动窗口的经典题目"><a href="#滑动窗口的经典题目" class="headerlink" title="滑动窗口的经典题目"></a>滑动窗口的经典题目</h2><h3 id="滑动窗口是一种常用的算法思想，常用于解决一些与连续区间相关的问题。下面是两道经典的滑动窗口题目’"><a href="#滑动窗口是一种常用的算法思想，常用于解决一些与连续区间相关的问题。下面是两道经典的滑动窗口题目’" class="headerlink" title="滑动窗口是一种常用的算法思想，常用于解决一些与连续区间相关的问题。下面是两道经典的滑动窗口题目’"></a>滑动窗口是一种常用的算法思想，常用于解决一些与连续区间相关的问题。下面是两道经典的滑动窗口题目’</h3><h4 id="1-长度最小的子数组"><a href="#1-长度最小的子数组" class="headerlink" title="1. 长度最小的子数组"></a>1. 长度最小的子数组</h4><p>  给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的连续子数组。如果不存在符合条件的连续子数组，返回 0。</p><p>  示例：</p><p>  输入：s &#x3D; 7, nums &#x3D; [2,3,1,2,4,3]<br>  输出：2<br>  解释：子数组 [4,3] 是该条件下的长度最小的连续子数组。</p><p>  解题思路：</p><p>  维护一个滑动窗口，记录窗口左右端点的位置 left 和 right。初始化 left &#x3D; right &#x3D; 0，sum &#x3D; 0，用 sum 记录窗口中元素的和。然后不断移动右端点，直到窗口中元素的和大于等于 s。此时记录一下窗口的长度，然后移动左端点，缩小窗口的范围，直到窗口中元素的和小于 s。这个过程中不断更新窗口的长度，最后输出最小的长度即可。</p><p>  代码实现</p><pre><code>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">minSubArrayLen</span>(<span class="params">s, nums</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> left = <span class="number">0</span>, right = <span class="number">0</span>; sum = <span class="number">0</span>, ans = <span class="title class_">Infinity</span>;</span><br><span class="line">  <span class="keyword">const</span> len = nums.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">while</span> (right &lt; len) &#123;</span><br><span class="line">    sum += nums[right];</span><br><span class="line">    <span class="comment">// 取最小值过程</span></span><br><span class="line">    <span class="keyword">while</span> (sum &gt;= s) &#123;</span><br><span class="line">      ans = <span class="title class_">Math</span>.<span class="title function_">min</span>(ans, right - left + <span class="number">1</span>);</span><br><span class="line">      sum -= nums[left];</span><br><span class="line">      left++;</span><br><span class="line">    &#125;</span><br><span class="line">    right++</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (ans === <span class="title class_">Infinity</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h4 id="2-最长连续递增序列"><a href="#2-最长连续递增序列" class="headerlink" title="2.  最长连续递增序列"></a>2.  最长连续递增序列</h4><p>  给定一个未经排序的整数数组，找到最长的连续递增序列（子数组）的长度。</p><p>  示例：</p><p>  输入: [1,3,5,4,7]<br>  输出: 3<br>  解释: 最长连续递增序列是 [1,3,5], 长度为3。</p><p>  解题思路：</p><p>  维护一个滑动窗口，记录窗口左右端点的位置 left 和 right。初始化 left &#x3D; right &#x3D; 0，max_len &#x3D; 1，用 max_len 记录最长连续递增序列的长度。然后不断移动右端点，如果当前元素比前一个元素大，说明当前元素可以加入到递增序列中，此时更新 max_len。如果当前元素比前一个元素小，说明递增序列已经断开，更新 left 的位置为 right，重新开始寻找递增序列。</p><p>  代码实现</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findLengthOfLCIS</span>(<span class="params">nums</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> len = nums.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span>(len === <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> left = <span class="number">0</span>,right = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> max_len = <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span>( right&lt;len )&#123;</span><br><span class="line">    <span class="keyword">if</span>(right&gt;<span class="number">0</span> &amp;&amp; nums[right] &gt; nums[right-<span class="number">1</span>])&#123;</span><br><span class="line">      max_len = <span class="title function_">max</span>(max_len, right - left + <span class="number">1</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      left = right</span><br><span class="line">      right += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> max_len</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h4 id="3-最多颜色的车辆"><a href="#3-最多颜色的车辆" class="headerlink" title="3. 最多颜色的车辆"></a>3. 最多颜色的车辆</h4><p>  题目描述<br>  在一个狭小的路口，每秒只能通过一辆车，假设车辆的颜色只有 3 种，找出 N 秒内经过的最多颜色的车辆数量。</p><p>  三种颜色编号为0 ，1 ，2</p><p>  输入描述<br>  第一行输入的是通过的车辆颜色信息<br>  [0,1,1,2] 代表4 秒钟通过的车辆颜色分别是 0 , 1 , 1 , 2</p><p>  第二行输入的是统计时间窗，整型，单位为秒</p><p>  输出描述<br>  输出指定时间窗内经过的最多颜色的车辆数量。</p><p>  输入<br>  0 1 2 1<br>  3</p><p>  输出 2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"><span class="keyword">const</span> t = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">carNums</span>(<span class="params"> arr,n</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> l = <span class="number">0</span>; </span><br><span class="line">  <span class="keyword">let</span> r = l + n;</span><br><span class="line">  <span class="keyword">let</span> max_0_t = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> max_1_t = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> max_2_t = <span class="number">0</span></span><br><span class="line">  <span class="keyword">const</span> len = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">while</span>( r &lt;= len )&#123;</span><br><span class="line">    <span class="keyword">const</span> temp = arr.<span class="title function_">slice</span>(l,r)</span><br><span class="line">    <span class="keyword">let</span> map = &#123;</span><br><span class="line">      <span class="string">&#x27;0&#x27;</span>:<span class="number">0</span>,</span><br><span class="line">      <span class="string">&#x27;1&#x27;</span>:<span class="number">0</span>,</span><br><span class="line">      <span class="string">&#x27;2&#x27;</span>:<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i= <span class="number">0</span>; i &lt; temp.<span class="property">length</span>; i++)&#123;</span><br><span class="line">      <span class="keyword">const</span> item = temp[i];</span><br><span class="line">      <span class="keyword">if</span>( item === <span class="number">0</span> )&#123;</span><br><span class="line">        map[<span class="string">&#x27;0&#x27;</span>] ++ </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>( item === <span class="number">1</span> )&#123;</span><br><span class="line">        map[<span class="string">&#x27;1&#x27;</span>] ++ </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>( item === <span class="number">2</span> )&#123;</span><br><span class="line">        map[<span class="string">&#x27;2&#x27;</span>] ++ </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    max_0_t = <span class="title class_">Math</span>.<span class="title function_">max</span>(map[<span class="number">0</span>],max_0_t);</span><br><span class="line">    max_1_t = <span class="title class_">Math</span>.<span class="title function_">max</span>(map[<span class="number">1</span>],max_1_t);</span><br><span class="line">    max_2_t = <span class="title class_">Math</span>.<span class="title function_">max</span>(map[<span class="number">2</span>],max_2_t);</span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line">    l ++ </span><br><span class="line">    r= l + n</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(max_0_t,max_1_t,max_2_t)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title function_">carNums</span>(_arr,t)); <span class="comment">// </span></span><br></pre></td></tr></table></figure><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>滑动窗口算法，核心是要写出窗口左右移动的条件</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ios手机端使用最新bing</title>
      <link href="/2023/03/12/ios%E6%89%8B%E6%9C%BA%E7%AB%AF%E4%BD%BF%E7%94%A8%E6%9C%80%E6%96%B0bing/"/>
      <url>/2023/03/12/ios%E6%89%8B%E6%9C%BA%E7%AB%AF%E4%BD%BF%E7%94%A8%E6%9C%80%E6%96%B0bing/</url>
      
        <content type="html"><![CDATA[<h3 id="1-申请新bing候补资格"><a href="#1-申请新bing候补资格" class="headerlink" title="1 申请新bing候补资格"></a>1 申请新bing候补资格</h3><p>申请网址：[ <a href="https://www.microsoftedgeinsider.com/zh-cn/download/dev">https://www.microsoftedgeinsider.com/zh-cn/download/dev</a> ]</p><blockquote><p>个人经验：全程挂梯子并且使用谷歌邮箱似乎通过的很快，我本人是一天左右通过的</p></blockquote><h3 id="2-使用美区ID-在appStore中下载bing"><a href="#2-使用美区ID-在appStore中下载bing" class="headerlink" title="2 使用美区ID 在appStore中下载bing"></a>2 使用美区ID 在appStore中下载bing</h3><blockquote><p>个人经验：bing有3个版本：国际版，中国版，针对中国的国际版。我们需要的是真正的国际版，因此需要去美区下载</p></blockquote><h3 id="3-bing下载成功后，进行以下三步设置"><a href="#3-bing下载成功后，进行以下三步设置" class="headerlink" title="3 bing下载成功后，进行以下三步设置"></a>3 bing下载成功后，进行以下三步设置</h3><ul><li>手机设置中，地区设置为美国</li><li>科学上网工具代理地址同样选择到美国</li><li>bing APP中地址也同样选择到美国</li></ul><h3 id="4-成功使用bing"><a href="#4-成功使用bing" class="headerlink" title="4 成功使用bing"></a>4 成功使用bing</h3><p><img src="/../images/new-bing.png" alt="alt text"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS任意进制之间的转换</title>
      <link href="/2023/03/11/JS%E4%BB%BB%E6%84%8F%E8%BF%9B%E5%88%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
      <url>/2023/03/11/JS%E4%BB%BB%E6%84%8F%E8%BF%9B%E5%88%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript-进制转换"><a href="#JavaScript-进制转换" class="headerlink" title="JavaScript 进制转换"></a>JavaScript 进制转换</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在计算机科学中，进制转换是一种非常基础的操作。在 JavaScript 中，可以使用 parseInt() 和 toString() 方法进行任意进制之间的转换。在本篇文章中，我们将介绍 JavaScript 中进行进制转换的基本方法，并且提供一些示例帮助你更好地理解这些方法。</p><h3 id="十进制转换为其他进制"><a href="#十进制转换为其他进制" class="headerlink" title="十进制转换为其他进制"></a>十进制转换为其他进制</h3><p>使用 <code>toString()</code> 方法可以将十进制数转换为其他进制数。该方法的参数为目标进制数，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 十进制转换为二进制</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> binary = num.<span class="title function_">toString</span>(<span class="number">2</span>); <span class="comment">// &quot;1010&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上面的例子中，num 为十进制数 10，我们将其转换为二进制数 1010</p><h3 id="其他进制转换为十进制"><a href="#其他进制转换为十进制" class="headerlink" title="其他进制转换为十进制"></a>其他进制转换为十进制</h3><p>使用 <code>parseInt()</code> 方法可以将其他进制数转换为十进制数。该方法的第一个参数为需要转换的数值，第二个参数为该数值的进制数，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二进制转换为十进制</span></span><br><span class="line"><span class="keyword">let</span> binary = <span class="string">&quot;1010&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> num = <span class="built_in">parseInt</span>(binary, <span class="number">2</span>); <span class="comment">// 10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上面的例子中，binary 为二进制数 1010，我们将其转换为十进制数 10。</p><p>需要注意的是，对于八进制数和十六进制数，需要在字符串前添加前缀 0 或 0x，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 八进制转换为十进制</span></span><br><span class="line"><span class="keyword">let</span> octal = <span class="string">&quot;17&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> num = <span class="built_in">parseInt</span>(octal, <span class="number">8</span>); <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 十六进制转换为十进制</span></span><br><span class="line"><span class="keyword">let</span> hex = <span class="string">&quot;A1&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> num = <span class="built_in">parseInt</span>(hex, <span class="number">16</span>); <span class="comment">// 161</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，octal 为八进制数 17，我们将其转换为十进制数 15。hex 为十六进制数 A1，我们将其转换为十进制数 161。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>核心方法 <code>parseInt()</code> <code>toString()</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS自定义事件</title>
      <link href="/2022/11/26/JS%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/"/>
      <url>/2022/11/26/JS%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="JS-发布订阅模式实现"><a href="#JS-发布订阅模式实现" class="headerlink" title="JS 发布订阅模式实现"></a>JS 发布订阅模式实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add an appropriate event listener</span></span><br><span class="line">obj.<span class="title function_">addEventListener</span>(<span class="string">&quot;cat&quot;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123; e.<span class="property">detail</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// create and dispatch the event</span></span><br><span class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> <span class="title class_">CustomEvent</span>(<span class="string">&quot;cat&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">detail</span>: &#123;</span><br><span class="line">    <span class="attr">hazcheeseburger</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">obj.<span class="title function_">dispatchEvent</span>(event);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

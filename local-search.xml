<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>基础算法-滑动窗口</title>
    <link href="/2023/03/13/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    <url>/2023/03/13/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="滑动窗口的经典题目"><a href="#滑动窗口的经典题目" class="headerlink" title="滑动窗口的经典题目"></a>滑动窗口的经典题目</h2><h3 id="滑动窗口是一种常用的算法思想，常用于解决一些与连续区间相关的问题。下面是两道经典的滑动窗口题目’"><a href="#滑动窗口是一种常用的算法思想，常用于解决一些与连续区间相关的问题。下面是两道经典的滑动窗口题目’" class="headerlink" title="滑动窗口是一种常用的算法思想，常用于解决一些与连续区间相关的问题。下面是两道经典的滑动窗口题目’"></a>滑动窗口是一种常用的算法思想，常用于解决一些与连续区间相关的问题。下面是两道经典的滑动窗口题目’</h3><h4 id="1-长度最小的子数组"><a href="#1-长度最小的子数组" class="headerlink" title="1. 长度最小的子数组"></a>1. 长度最小的子数组</h4><p>  给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的连续子数组。如果不存在符合条件的连续子数组，返回 0。</p><p>  示例：</p><p>  输入：s &#x3D; 7, nums &#x3D; [2,3,1,2,4,3]<br>  输出：2<br>  解释：子数组 [4,3] 是该条件下的长度最小的连续子数组。</p><p>  解题思路：</p><p>  维护一个滑动窗口，记录窗口左右端点的位置 left 和 right。初始化 left &#x3D; right &#x3D; 0，sum &#x3D; 0，用 sum 记录窗口中元素的和。然后不断移动右端点，直到窗口中元素的和大于等于 s。此时记录一下窗口的长度，然后移动左端点，缩小窗口的范围，直到窗口中元素的和小于 s。这个过程中不断更新窗口的长度，最后输出最小的长度即可。</p><p>  代码实现：</p><pre><code class="hljs">  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">minSubArrayLen</span>(<span class="hljs-params">s, nums</span>) &#123;<br>  <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span>, right = <span class="hljs-number">0</span>; sum = <span class="hljs-number">0</span>, ans = <span class="hljs-title class_">Infinity</span>;<br>  <span class="hljs-keyword">const</span> len = nums.<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">while</span> (right &lt; len) &#123;<br>    sum += nums[right];<br>    <span class="hljs-comment">// 取最小值过程</span><br>    <span class="hljs-keyword">while</span> (sum &gt;= s) &#123;<br>      ans = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(ans, right - left + <span class="hljs-number">1</span>);<br>      sum -= nums[left];<br>      left++;<br>    &#125;<br>    right++<br><br>  &#125;<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure></code></pre><h4 id="2-最长连续递增序列"><a href="#2-最长连续递增序列" class="headerlink" title="2.  最长连续递增序列"></a>2.  最长连续递增序列</h4><p>  给定一个未经排序的整数数组，找到最长的连续递增序列（子数组）的长度。</p><p>  示例：</p><p>  输入: [1,3,5,4,7]<br>  输出: 3<br>  解释: 最长连续递增序列是 [1,3,5], 长度为3。</p><p>  解题思路：</p><p>  维护一个滑动窗口，记录窗口左右端点的位置 left 和 right。初始化 left &#x3D; right &#x3D; 0，max_len &#x3D; 1，用 max_len 记录最长连续递增序列的长度。然后不断移动右端点，如果当前元素比前一个元素大，说明当前元素可以加入到递增序列中，此时更新 max_len。如果当前元素比前一个元素小，说明递增序列已经断开，更新 left 的位置为 right，重新开始寻找递增序列。</p><p>  代码实现</p><pre><code class="hljs"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">findLengthOfLCIS</span>(<span class="hljs-params">nums</span>)&#123;<br>  <span class="hljs-keyword">const</span> len = nums.<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">if</span>(len === <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span>,right = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">let</span> max_len = <span class="hljs-number">1</span><br>  <span class="hljs-keyword">while</span>( right&lt;len )&#123;<br>    <span class="hljs-keyword">if</span>(right&gt;<span class="hljs-number">0</span> &amp;&amp; nums[right] &gt; nums[right-<span class="hljs-number">1</span>])&#123;<br>      max_len = <span class="hljs-title function_">max</span>(max_len, right - left + <span class="hljs-number">1</span>)<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      left = right<br>      right += <span class="hljs-number">1</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> max_len<br>&#125;<br></code></pre></td></tr></table></figure></code></pre><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>滑动窗口算法，核心是要写出窗口左右移动的条件</p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ios手机端使用最新bing</title>
    <link href="/2023/03/12/ios%E6%89%8B%E6%9C%BA%E7%AB%AF%E4%BD%BF%E7%94%A8%E6%9C%80%E6%96%B0bing/"/>
    <url>/2023/03/12/ios%E6%89%8B%E6%9C%BA%E7%AB%AF%E4%BD%BF%E7%94%A8%E6%9C%80%E6%96%B0bing/</url>
    
    <content type="html"><![CDATA[<h3 id="1-申请新bing候补资格"><a href="#1-申请新bing候补资格" class="headerlink" title="1 申请新bing候补资格"></a>1 申请新bing候补资格</h3><p>申请网址：[ <a href="https://www.microsoftedgeinsider.com/zh-cn/download/dev">https://www.microsoftedgeinsider.com/zh-cn/download/dev</a> ]</p><blockquote><p>个人经验：全程挂梯子并且使用谷歌邮箱似乎通过的很快，我本人是一天左右通过的</p></blockquote><h3 id="2-使用美区ID-在appStore中下载bing"><a href="#2-使用美区ID-在appStore中下载bing" class="headerlink" title="2 使用美区ID 在appStore中下载bing"></a>2 使用美区ID 在appStore中下载bing</h3><blockquote><p>个人经验：bing有3个版本：国际版，中国版，针对中国的国际版。我们需要的是真正的国际版，因此需要去美区下载</p></blockquote><h3 id="3-bing下载成功后，进行以下三步设置"><a href="#3-bing下载成功后，进行以下三步设置" class="headerlink" title="3 bing下载成功后，进行以下三步设置"></a>3 bing下载成功后，进行以下三步设置</h3><ul><li>手机设置中，地区设置为美国</li><li>科学上网工具代理地址同样选择到美国</li><li>bing APP中地址也同样选择到美国</li></ul><h3 id="4-成功使用bing"><a href="#4-成功使用bing" class="headerlink" title="4 成功使用bing"></a>4 成功使用bing</h3><p><img src="/../images/new-bing.png" alt="alt text"></p>]]></content>
    
    
    
    <tags>
      
      <tag>经验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS任意进制之间的转换</title>
    <link href="/2023/03/11/JS%E4%BB%BB%E6%84%8F%E8%BF%9B%E5%88%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    <url>/2023/03/11/JS%E4%BB%BB%E6%84%8F%E8%BF%9B%E5%88%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="JavaScript-进制转换"><a href="#JavaScript-进制转换" class="headerlink" title="JavaScript 进制转换"></a>JavaScript 进制转换</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在计算机科学中，进制转换是一种非常基础的操作。在 JavaScript 中，可以使用 parseInt() 和 toString() 方法进行任意进制之间的转换。在本篇文章中，我们将介绍 JavaScript 中进行进制转换的基本方法，并且提供一些示例帮助你更好地理解这些方法。</p><h3 id="十进制转换为其他进制"><a href="#十进制转换为其他进制" class="headerlink" title="十进制转换为其他进制"></a>十进制转换为其他进制</h3><p>使用 <code>toString()</code> 方法可以将十进制数转换为其他进制数。该方法的参数为目标进制数，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 十进制转换为二进制</span><br><span class="hljs-keyword">let</span> num = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">let</span> binary = num.<span class="hljs-title function_">toString</span>(<span class="hljs-number">2</span>); <span class="hljs-comment">// &quot;1010&quot;</span><br><br></code></pre></td></tr></table></figure><p>在上面的例子中，num 为十进制数 10，我们将其转换为二进制数 1010</p><h3 id="其他进制转换为十进制"><a href="#其他进制转换为十进制" class="headerlink" title="其他进制转换为十进制"></a>其他进制转换为十进制</h3><p>使用 <code>parseInt()</code> 方法可以将其他进制数转换为十进制数。该方法的第一个参数为需要转换的数值，第二个参数为该数值的进制数，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 二进制转换为十进制</span><br><span class="hljs-keyword">let</span> binary = <span class="hljs-string">&quot;1010&quot;</span>;<br><span class="hljs-keyword">let</span> num = <span class="hljs-built_in">parseInt</span>(binary, <span class="hljs-number">2</span>); <span class="hljs-comment">// 10</span><br><br></code></pre></td></tr></table></figure><p>在上面的例子中，binary 为二进制数 1010，我们将其转换为十进制数 10。</p><p>需要注意的是，对于八进制数和十六进制数，需要在字符串前添加前缀 0 或 0x，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 八进制转换为十进制</span><br><span class="hljs-keyword">let</span> octal = <span class="hljs-string">&quot;17&quot;</span>;<br><span class="hljs-keyword">let</span> num = <span class="hljs-built_in">parseInt</span>(octal, <span class="hljs-number">8</span>); <span class="hljs-comment">// 15</span><br><br><span class="hljs-comment">// 十六进制转换为十进制</span><br><span class="hljs-keyword">let</span> hex = <span class="hljs-string">&quot;A1&quot;</span>;<br><span class="hljs-keyword">let</span> num = <span class="hljs-built_in">parseInt</span>(hex, <span class="hljs-number">16</span>); <span class="hljs-comment">// 161</span><br></code></pre></td></tr></table></figure><p>在上面的例子中，octal 为八进制数 17，我们将其转换为十进制数 15。hex 为十六进制数 A1，我们将其转换为十进制数 161。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>核心方法 <code>parseInt()</code> <code>toString()</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS自定义事件</title>
    <link href="/2022/11/26/JS%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/"/>
    <url>/2022/11/26/JS%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="JS-发布订阅模式实现"><a href="#JS-发布订阅模式实现" class="headerlink" title="JS 发布订阅模式实现"></a>JS 发布订阅模式实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// add an appropriate event listener</span><br>obj.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;cat&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123; e.<span class="hljs-property">detail</span> &#125;);<br><br><span class="hljs-comment">// create and dispatch the event</span><br><span class="hljs-keyword">var</span> event = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomEvent</span>(<span class="hljs-string">&quot;cat&quot;</span>, &#123;<br>  <span class="hljs-attr">detail</span>: &#123;<br>    <span class="hljs-attr">hazcheeseburger</span>: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;);<br>obj.<span class="hljs-title function_">dispatchEvent</span>(event);<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
